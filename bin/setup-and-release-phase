#!/bin/bash

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
#set -u
# Debug, echo every command
set -x

EVENTSERVER_APP_NAME=heroku-default-app

if [ -z "$DATABASE_URL" ]
then
  echo "PredictionIO requires a DATABASE_URL to run. Exiting. (New config will trigger another release.)"
  exit
fi

                # Wait until the database is alive.**
bin/addon-wait

# Only setup the Eventserver app once
set +e # allow non-zero exit codes
echo "Checking if '$EVENTSERVER_APP_NAME' already exists in the eventserver"
pio app show $EVENTSERVER_APP_NAME
if [ $? -ne 0 ]
then
  set -e
  
  echo "Creating '$EVENTSERVER_APP_NAME' in the eventserver"
  pio app new --access-key $PIO_EVENTSERVER_ACCESS_KEY $EVENTSERVER_APP_NAME | tee app-new-out.log

  # Capture the new App ID
  EVENTSERVER_APP_ID=`cat app-new-out.log | ruby -E utf-8:utf-8 -e 'STDOUT << /id:\s+(\w+)/i.match(STDIN.read)[1]'`

  echo "Importing sample events for training to App ID $EVENTSERVER_APP_ID"
  eval "pio import --appid $EVENTSERVER_APP_ID --input /app/pio-engine/data/initial-training-events.json -- --driver-class-path /app/lib/postgresql_jdbc.jar"
else
  set -e
  echo "Found '$EVENTSERVER_APP_NAME' in the eventserver. Skipping setup."
fi

echo "Executing PredictionIO release phase"
bin/heroku-buildpack-pio-release